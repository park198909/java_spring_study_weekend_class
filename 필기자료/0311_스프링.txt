데이터베이스 연동
1. JDBC 프로ㅓ그래밍의 단점을 보완하는 스프링

Exception
	- 컴파일시에  체크되는 예외
	- 예외 발생시 컴파일X
	- 형식도 중요(throws...)
	- 예외가 발생하든 안하든 무조건 예외처리
	- 엄격한 예외

Exception
	RuntimeException
	- 실행중에 테크되는 예외
	- 컴파일O, 실행O
	- 실행중 예외 발생 -> 프로그램이 중단
	- 예외처리를 따로 하지 않아도 된다.
	- 유연한 예외

JDBC API
	Exception
	- SQLException

jdbcTemplate, MyBatis, JPA
SQLException -> RuntimeException계열의 예외 재정의

2. 커넥션 풀

Pool -> 저장소

커넥션 풀 -> 연결 객체 저장소, 객체를 생성하는데 소모되는 자원을 아끼기 위한 기능

maven repository 추가(https://mvnrepository.com/)
	spring-context
	spring-jdbc
	tomcat-jdbc
	mysql-connect-j(mysql driver)


API(Application Programming Interface)

slf4j-api(인터페이스)
logback-classic(구현체)

javax.validation-api(인터페이스)
hibernate-validator(구현체)

3. 프로젝트 생성
- DB 레이블 생성
- Data 

DataSource
	- DB설정에 대한 정보
	- url
	- 계정
	- 비번
	- 커넥션 풀 설정

@Autowired
	1. 멤버변수
	2. setter 메서드의 매개변수
	3. Optional

	4. 생성자 매개변수

4. jdbcTemplate을 이용한 쿼리 실행
	List<T> query SELECT
	T queryForObject

	int update - INSERT, UPDATE, DELETE
	(반영된 레코드 갯수)

















