스프링MVC와 타임리프 연동
-------------------------------------------------
용어
쿼리스트링

스프링 동작과정 : 객체 생성 -> 의존성 주입 -> 초기화 -> 소멸

클래스패스(class path) : 자바 클래스 파일을 인식할 수 있는 경로
maven 프로젝트
src/main/java : 자바코드
src/main/resources : 정적 자원 정의, 설정 파일(xml, properties)
src/test/java : 테스트용 자바코드
src/test/resources 

JSP
	HttpServletRequest request
	HttpServletResponse responese
	PageContext pageContext
	HttpSession session
	ServletContext application
	ServletConfig config
	Object page = this

param

-------------------------------------------------
사용방법

타임리프 주요식
변수식 : ${변수,연산식}
	변수 - 속성을 관리하는 객체에서 설정한 속성
		HttpServletRequest request
		PageContext pageContext
		HttpSession session
		ServletContext application
			- setAttribute
			- getAttribute
			- removeAttribute
		
		Model model
			- addAttribute
			- addAllAttribute

메세지 식 : #{메세지 코드}
	메세지
	공통문구 : 메세지 파일로 관리
	다국어 메세지_ko.properties
	         메세지_en.properties
		-> 브라우저 언어 설정이 영어

	Messource 빈(messageSource)


링크 식 : @{링크} : 컨택스트 경로
		예) 프로젝트 폴더 week3_01
			-> /week3_01/..
	   + 쿼리스트링, 변수 치환기능
	{id}(id=*{userPw})->  id에 userPw를 입력

선택 변수 식 : *{"..."}
	th:object="커맨드객체 ..."
		-> *{...}
	예) th:object="${memberJoin}"
		*{userId}
-------------------------------------------------

1) th:text="식" : 문자만 번역
   th:utext="식" : HTML도 번역 = [[ 번역가능 ]]
    <th:block>~</th:block> -> 빈 태그, 태그 없이 값을 지정, 제어문

-------------------------------------------------
2) 타임리프 식 객체(내장객체)
	기본 객체식
		#dates -> Date Class
		#calendars -> Calendar Class
		#temporals -> java.time패키지 대응 날짜 표현식
	
	유틸리티 객체 식
		${#객체명.메서드(속성)}
		-> 기능이 없으면 만들면 된다.
		-> 스프링 관리 객체(@Bean...)이면 {@빈이름.메서드(...)}으로 접근하여 만들어 사용한다.

4) th:each - 반복문 - 컬렉션(List,Set), 배열

th:object=
status : 반복문에 대한 상태 정보
	- index : 0부터 시작하는 순서 번호
	- count : 1부터 시작하는 순서 번호
	- first : 첫번째
	- last : 마지막
	- odd : 홀수
	
5) th:if th:unless - 조건문
	th:if : 참일때 출력되는 부분,
	th:unless : 거짓일때 출력되는 부분,

6) th:href -> [@,$,*]{링크}
	-> 대체가 되는 속성 th:속성명
	
	href='...'th:href="@{...}"

	action="..."th:action"@{...}"

	src="..."th:src="@{...}"

	value="..."th:value="${...}"



-------------------------------------------------

4. 타임리프 페이지 레이아웃

th:each

컨트롤러 정의 없이 URL 매칭과 
-------------------------------------------------

스프링MVC
1. 요청 매핑
	매핑(mapping - 검색)
	- 요청 URL, 요청 메서드에 해당하는 Controller 빈 검색을 알려주는 용도(HandlerMapping이 찾기위한 단서)
	- 요청매핑 애노테이션 
		@GetMapping - 추가되는 URL
		   @DeleteMapping

		@PostMapping - 추가되는 URL
		   @PutMapping
		   @PatchMapping

		@RequestMapping - 모든 요청의 공통URL

th:field="${...}"
	input:text -> value -> value
	input:checkbox, radio -> checked
	select -> selected

3. 리다이렉트
	- 반환값으로 "redirect주소" 키워드가 반환되면 주소로 페이지가 이동된다.



7. 커맨드 객체 검증

Validator 인터페이스

Errors 클래스 -> 문제 발생 시 스프링 내에서 자동주입
필드 한정 오류 메세지 처리
	- rejectValue(필드명, 메세지 코드);
	- rejectValue(필드명, 메세지 코드, 기본 메세지);

커맨드 객체 자체 오류 메세지 처리
	- reject(메세지 코드);
	- reject(메세지 코드, 기본메세지);

rejectValue, reject가 하나라도 호출되면 hasErrors() 값이 true가 된다.

ValidationUtils
	.rejectIfEmpty
	.rejectIfEmptyOrWritespace

@Autowired 적용시키는 방법
1. 멤버변수

2. setter메서드 의 매개변수

3. Optional

4. @Autowired 사용하지 않고 주입 - 생성자 매개 변수




#fields
	.errors('필드명') : 배열로 반환


메세지 코드의 범위를 한정하는 방법
메세지코드.필드명
메세지코드.커맨드객체명.필드명
메세지코드.자료형
메세지코드.필드명.자료형
메세지코드.커맨드객체명.자료형

Bean Validation API - 설계도
(javax.validation 패키지)
	API(Application Programming Interface) - 설계도, 구현체를 따로 가진다.

hibernate-validator 구현체

AOP(Aspect Oriented Proxy


Bean Validation2.0에서 추가된 애노테이션
@CreditCardNumber - 카드번호가 잘못입력되면 에러발생

