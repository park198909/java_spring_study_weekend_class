스프링 부트

WebMvcConfigurer 인터페이스(중요) 
- valid 관련기능을 사용하기위해 참조하는 인터페이스

브라우저에 추가설치
JSON formatter - JSON형태를 자동으로 번역
LiveReload - 페이지 자동갱신

1. @RestController
    - JSON 자동응답
    - application/json -> json 일때 응답헤더의 content-type
    - text/plain -> json이 아닐 때 응답헤더의 content-type
      - 문자열(String), void 
    - 반환객체(getter) -> 자동 변환 -> Jackson Databind가 설정되어 있음
    -  ObjectMapper
       RestTemplate - 스프링에서 설정필요
    
    - @JsonFormat : 날짜 형식 자동 변환
    - @JsonIgnore : JSON 자동 변환에서 제외
    
2. @ResponseBody
    - @RestController를 정의하지 않고
    - @Controller에서 일부 요청 메서드를 Rest로 사용할 때
    
3. @RequestBody
    - application/json에서 커맨드 객체 알려주는 기능

스프링 -> 커맨드 객체(요청 매핑을 자동 매칭)
    - 기본 요청 형식 : 
        content-type : application/x-www-form-urlencoded
          - 전통적인 form 형태의 양식 데이터
          - 요청 바디 : 키=값&키=값
          
    - 기본 요청 형식만 커맨드 객체로 변환
    - 다른 형식은 변환 안됨
    - 다른 형식(application/json)은 알려줘야 인식됨
    - 커맨드 객체 앞에 추가하여 활성화
    
ARC(Advance Rest Client) 
- 데이터를 임의로 보내 결과를 확인해보는 프로그램
- https://www.advancedrestclient.com/
    
4. @ResponseEntity
          - 상태코드와 응답 데이터를 통제
          
          - 201 - Created(작성됨) : POST
              - 작성 이후 주소 이동
          
          .status(응답 코드) : 상태코드를 확인
            .body(응답 데이터) : 응답 데이터가 있을 경우
            .build() : 응답 데이터가 없는 경우


@DateTimeFormat -> 시간 표시형식을 브라우저가 인식하도록 하는 기능
@Data 
    - @Getter + @Setter + @ToString + 기타등등
@Log
@Sfl4j
@Sfl4j2

@ExceptionHandler - 예외를 통제하는 기능
  - 발생한 예외 주입
  - HttpServletRequest
  - HttpServletReponse
  - HttpSession
  - Model
  
@RestControllerAdvice
스프링부트에서 기존 상태 관련 에러 처리
템플릿 경로
    /error
        /401.html
        /404.html
        /500.html ...
        
Builder 패턴
    -> setter를 대신함
    -> 메서드 체이닝 값 설정
   - @Builder로 간단히 설정 가능
    
GoF 디자인패턴 - 23가지 디자인패턴 모음(취업 뒤에 볼 것)


-----------------------------------------------------------------------------------------------
1. JPA 동작방식
JPA(Java Persistence API : 자바 영속성 API)
API(Application Programing Interface)
javax.persistence
jakarta.persistence
    - hibernate EntityManager : 실제 구현체
    
Spring boot stater data jpa 설정 필요
    # Spring Data JPA 설정
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://localhost:3306/springboard
    spring.datasource.username=springboard
    spring.datasource.password=aA!123456
    # 실행되는 쿼리 콘솔 출력
    spring.jpa.properties.hibernate.show_sql=true
    # 콘솔 창에 출력되는 쿼리를 가독성 좋게 포맷팅
    spring.jpa.properties.hibernate.format_sql=true
    # 쿼리에 물음표로 출력되는 바인드 파라미터 출력
    logging.level.org.hibernate.type.descriptor.sql=trace
    spring.jpa.hibernate.ddl-auto=create
    spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

EntityManagerFactory
- EntityManager를 생산하는 기능
EntityManager
- database와 자바 객체를 연결하여 자동으로 테이블을 생성하는 기능(ORM)
영속성 컨택스트(Persistence Context)
- Entity 상태 감지 -> flush() -> 쿼리 실행

persist(Entity) : Entity를 영속성 컨택스트에 넣어준다.
                      - Entity 상태를 감지할 수 있게 된다.
                      
remove(Entity) : Entity를 영속성 컨택스트에서 제거한다                      
                      - flush() -> DELETE쿼리 실행
                      
detach(Entity) : Entity를 영속성 컨택스트에서 분리한다                      
                      - Entity 상태를 감지하지 않는다.
                      - 쿼리를 반영하지 않는다.

merge(Entity) : 양속성에서 분리된 Entity를 영속서에 추가한다.
                      - Entity 상태를 감지할 수 있게 된다.
                      - 쿼리를 반영한다.

